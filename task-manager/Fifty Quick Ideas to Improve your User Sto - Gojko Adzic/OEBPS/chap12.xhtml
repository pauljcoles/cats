<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title dir="ltr">Use hierarchical backlogs</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
<meta charset="utf-8"/>
</head>
<body dir="ltr">
<div>
<h2 id="idea-hierarchical-backlogs">Use hierarchical backlogs</h2>


<figure class="image center">
  <img src="images/mobi----hierarchical_backlogs.jpg" alt="" />
  <figcaption></figcaption>
</figure>


<p>One of the deepest pitfalls of fake iterative delivery is <em>story card hell</em>,
nicely <a href="http://www.jamesshore.com/Presentations/Beyond%20Story%20Cards.html">described by Jim Shore in
2005</a>:</p>

<blockquote>
  <p>Story card hell is when you have 300 story cards and you have to keep track of
them all… When you have 300 cards, you lose the ability to understand what
they mean.</p>
</blockquote>

<p>Unfortunately, almost a decade later, we often meet teams who have ended up in
that limbo. Story card hell is dangerous because it provides an illusion that
the process is working iteratively, whereas in fact the teams are following a
detailed plan set months ago. Three key problems arising from this are:</p>

<ul>
  <li>The delivery team wastes a horrible amount of time tracking and managing
unnecessary items – time that could have been invested much more wisely.
Having to manage all this information often puts a lot of strain on product
managers, who then do not have enough time to deal with day-to-day activities.</li>
  <li>When market opportunities change the business stakeholders are faced with a
serious dilemma. Aligning the plan to meet the changed circumstances would
lead to throwing away a lot of work sunk into estimation and breaking
commitments. Keeping the plan would lead to delivering outdated or useless
features or delaying work on something more important.</li>
  <li>It’s very easy to hide scope creep and unnecessary work in a pile of several
dozen items. It becomes very difficult to challenge the value and goal of
individual items in such a big pile, which means that it’s much more likely
that the team will waste time doing the wrong things.</li>
</ul>

<p>Most people that fall into this trap are pressured to do it by their business
stakeholders. On one hand, if you want to run an iterative process, it’s pretty
much pointless to define the entire scope up front. On the other hand, business
stakeholders – especially those responsible for budgeting – want to keep track
of costs and push for detailed estimates. We’ll deal with the issue of estimates
later, but for now let’s deal with the planning aspect of this problem.</p>

<p>One of Elisabeth Hendrickson’s ideas that we like the most is that people who
ask for control often really want visibility. Small user stories, deliverable
within an iteration, are great for providing low-level process visibility. They
are useless for a big-picture view, though. This lack of big-picture visibility
is a key reason why business stakeholders push for detailed estimates and
commitments on dozens or hundreds of stories upfront.</p>

<p>This is where asteroids come in. Not the real ones, but white circular shapes,
moving quickly on 1980s TV screens, connected to small furnaces labelled ATARI.
Space fighter pilots would shoot at asteroids and break them into smaller
pieces, then break those rocks further until they were so small that a laser
shot vaporised them. Touch an asteroid with your plane, and the game is over.
The asteroids game is immense fun. But it’s also quite educational from the
perspective of iterative planning with user stories.</p>

<p>Like most other good visual metaphors for agile product management, this one
comes from Jeff Patton. A sure way to lose the asteroids game is to break up all
the big rocks early. This produces a ton of small asteroids flying all over the
place, and makes it impossible for the pilot to navigate without crashing. The
way to win is to pick off one large asteroid at a time, keeping the number of
mid-size asteroids on the screen low enough to be able to navigate, and to
vaporise smaller asteroids as soon as they form. Managing the number of
on-screen asteroids in different size categories is crucial. Small ones are the
most important, but at the same time, it would be unwise to take your eyes off
the big asteroids.</p>

<p>Similarly, a sure way to lose the agile planning game is to break up all the big
items into small ones, so that the team cannot navigate and change course any
more. But you can’t work only on the big items, because you would not be able to
plan effectively. The story card hell problem starts when a team only has one
level of abstraction in their backlog – when the backlog becomes linear. The
solution is to make the backlog hierarchical.</p>

<p>Try to divide your plan into several tiers, and then avoid breaking down a
higher-level item until you complete all the relevant lower-level stories for
the previous higher-level item. Plan for asteroids – some will be huge, some
will be small, but give yourself space to manoeuvre. Until you clean up the
first big item completely, there is no point attacking the other big items. Keep
things in a hierarchy so you can monitor, discuss and report on the big-picture
items. Keeping an eye on other big-picture items ensures that the delivery team
members know what’s coming up and have an overall view. It also reassures the
business stakeholders that the team has not forgotten about all the other things
they need, even if they are not broken down into minute detail.</p>

<p>A hierarchical backlog allows different stakeholders to discuss, report on and
analyse different levels of information. It allows the team to plan iterative
delivery and divide work into small independent items. It allows the business
stakeholders to plan and monitor larger business impacts. Instead of
micro-managed control, a hierarchical backlog provides visibility and
transparency, removing the need to detail all levels of hierarchy at the start.</p>

<p>We often use at least four levels:</p>

<ul>
  <li>big-picture business objective, for example, grow mobile subscriptions</li>
  <li>smaller-scale business change that might contribute to that big picture, for
example, longer user engagement from mobile devices, better conversion from
web to mobile, easier migration from competitor systems</li>
  <li>software deliverables that might support those changes, for example, data
import from competitor formats, mobile data preview</li>
  <li>smaller deliverable slices that we could ship independently, for example, file
access to competitor systems, importing individual data formats, a mobile
preview page</li>
</ul>


<figure class="image center">
  <img src="images/mobi----funnel_001.jpg" alt="" />
  <figcaption></figcaption>
</figure>


<p>We avoid breaking down large items into smaller ones until we need to populate
the lower levels with more information. So for example, until we need to start
working on a business goal, we would not even try to identify possible business
changes that would relate to that. The goal stays in the plan so people know
what’s coming.</p>

<h3 id="leanpub-auto-key-benefits-9">Key benefits</h3>

<p>Organising the backlog into several tiers allows teams to reduce significantly
the overall number of items, at the same time providing a big-picture view. This
means that a delivery team does not need to spend a lot of time managing items,
and that nobody has to worry about a lot of sunk cost if the plan needs to
change.</p>

<p>A hierarchical plan allows the organisation to react effectively to changing
market opportunities. It allows stakeholders to change priorities at any level
and quickly discard a whole hierarchy of items if they are no longer applicable.
For example, we worked on implementing real-time collaboration for an online
document management tool. Half-way through implementation, Google released its
Drive Realtime API. This pretty much invalidated the business case for remote
document collaboration, as anyone could now build one for free using Google’s
infrastructure. Because our team had a hierarchy of items, clearly connected to
that goal, we could just stop working on anything in that branch of the plan and
prioritise a different objective.</p>

<p>A visual connection between different levels also makes it difficult to hide
scope creep. Unnecessary features are much easier to spot because there is a
higher-level context for each deliverable.</p>

<p>Similarly, a hierarchical plan allows organisations to benefit from insights
during delivery. If everyone involved in delivery understands the big picture,
they can make better decisions and stop working on items that do not contribute
to the big picture, or propose new ideas that will contribute better. For
example, one of the milestones for the collaboration product was about growing
the number of users significantly. Half-way through working on that, we got a
complaint from a university that they couldn’t simply activate the application
as expected for their 800 students. The university administrators were used to
activating the applications through Google’s Apps for Education. We haven’t even
considered that as an important feature. Assuming that there are other
organisations with a similar problem, the actual potential to get new users
through Apps for Education was huge. We added the new integration to our
backlog, prioritised it over everything else and shipped it quickly. We were
able to do that easily because the big picture was clear to everyone – the
goals on the top of the hierarchy would be better served with a changed plan.</p>

<h3 id="leanpub-auto-how-to-make-it-work-9">How to make it work</h3>

<p>Please don’t regard the four-level hierarchy explained earlier as a hard and
fast rule; it’s just an example. Experiment with the number of levels and the
context for each tier until you find something that works for your environment.
Keep the number of items in each tier relatively small – no more than what’s
immediately needed for further planning and delivery. The actual numbers of
course depend on your environment, of course. Teams that need to coordinate
external stakeholders, perform customer research or engage people outside the
team might need to keep a larger number of items in the pipeline, so that the
delivery team always has enough items to work on. Teams whose business
stakeholders are immediately available can most likely live with one iteration’s
worth of items at the lower levels.</p>

<p>One way to implement this idea is to use a visual board with several horizontal
swim lanes to represent different tiers. If you use a physical planning board,
colour-coding different levels or using different card sizes are good ways to
visualise this. Alternatively, you can represent the same information on a
customer journey map, a user story map or an impact map.</p>


</div>
</body>
</html>
