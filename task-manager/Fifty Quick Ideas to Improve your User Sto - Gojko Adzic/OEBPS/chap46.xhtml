<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title dir="ltr">Budget instead of estimate</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
<meta charset="utf-8"/>
</head>
<body dir="ltr">
<div>
<h2 id="idea-budget">Budget instead of estimate</h2>


<figure class="image center">
  <img src="images/mobi----budeget_estimating.jpg" alt="" />
  <figcaption></figcaption>
</figure>


<p>Detailed estimation works against the whole idea of flexible scope, but many
companies we work with fall into a common trap when they insist on work duration
estimates. ‘We are terrified of uncertainty – we would rather be wrong than
uncertain,’ said <a href="http://gojko.net/2011/11/10/dan-north-at-oredev-embrace-uncertainty/">Dan North at Oredev in
2011</a>. A
nice precise number feels good, it feels as if someone is in control. The
premise of this process is deeply flawed, because all the estimates come with a
margin of error that is rarely considered. There are several popular error
reduction techniques, such as estimating with intervals of confidence and
estimating based on statistical averages, but in many situations this is
actually not the right problem to solve.</p>

<p>Long-term estimates give the wrong impression of precision and promote long-term
commitment on scope, which eliminates the biggest benefit businesses can get
from agile delivery – adaptive planning.</p>

<p>Instead of estimating, try to start with a budget for a bigger piece of work, in
terms of both operational costs and time. This budget can then become a design
constraint for the delivery team, similar to scalability or performance.
Essentially, rather than asking ‘how long will it take?’, ask ‘when do you need
this by?’ and ‘how much can you afford to pay for it?’ The delivery team then
needs to come up with a solution to fit these constraints. This, of course,
requires transparency and trust between the people delivering software and the
people paying for it, so it is much easier to do for in-house software than for
third-party delivery.</p>

<h3 id="leanpub-auto-key-benefits-40">Key benefits</h3>

<p>Setting the budget, instead of estimating, eliminates the need to add up smaller
estimates, because the final number is already known. This in turn eliminates
the need to break down the larger milestone into lots of small stories and
analyse them upfront. This prevents wasting time on unnecessary analysis and
avoids commitment on scope, and instead establishes a commitment to deliver
business value.</p>

<p>Another important benefit is that this approach sets additional design
constraints, which enable the delivery team to come up with solutions that fit
the business case. A budget makes it clear whether things have to be improvised
or should be gold-plated.</p>

<h3 id="leanpub-auto-how-to-make-it-work-40">How to make it work</h3>

<p>The best way to decide on a budget, in terms of both time and money, is to look
at the expected business benefit and estimate its value to stakeholders. The
financial budget can then be set as a percentage of perceived value,
establishing a clear return-on-investment model. One of our clients is a team in
a bank working on software which directly reduces the operational costs of
financial transactions. The more transaction classes the software could
automatically process, the less the bank had to pay people to handle exceptions.
When they were setting their budget, they had reasonably good estimates of how
many full-time salary equivalents each larger chunk of planned software would
save.</p>

<p>Most businesses that we’ve worked with, unfortunately, are not in a position to
come up with a good financial estimate for the value. When there is no good
value model, try the following two approaches:</p>

<ul>
  <li>Ask about extremes</li>
  <li>Budget incrementally</li>
</ul>

<p>People are often much more comfortable talking about extremes than precise
values. Ask about extremes, for example ‘What is the least amount of money this
has to earn to make any reasonable impact? How much would make everyone say that
this was worth it?’ This often helps to open a useful discussion. Even orders of
magnitude are a good starting point for the discussion. We participated in
several workshops where stakeholders decided that the project wasn’t realistic
after they had quantified the order of magnitude for the extremes. This also
works for time constraints. For example, interesting questions to ask are ‘How
soon could you start using it if it was there already?’ and ‘What is the latest
we can launch this so that you still get some value out of it?’. If the extremes
are reasonably close, you can set the target somewhere in the middle.</p>

<p>If they are far apart, then you can aim for the earlier date first, and once
that is achieved replan for higher impact at the later date. Any readers with
basic knowledge of statistics are by now probably balking at our unscientific
suggestions, but remember the context here: companies without a good value model
and no prior success at even aligning the expectations.</p>

<p>If the discussion about extremes leads to a dead end, then there is no shared
understanding among the stakeholders about the potential value. This often means
that things are too uncertain. In such cases, the next step should really be
about reducing that uncertainty. Instead of deciding on the entire budget, plan
incrementally. First decide on a budget for learning: this can lead to
prototypes, low-fi interface testing with users, half-manual processes and
skeleton applications, or even business people going back to the drawing board
to come up with a shared model of value. The scope of the learning project is
often much easier to slice and narrow down, because everyone knows that this
will not be the final solution. Once the results of the learning project have
reduced uncertainty about the larger target, you can decide to invest in the
next step. With less confidence, take smaller steps. With more confidence, take
bigger leaps.</p>

<p>A common concern among stakeholders who are using flexible iterative development
methods for the first time is the risk of spending the budget but not getting
the value. If the value model is relatively linear – meaning that small
deliverables can bring value quickly and incrementally – then you can establish
smaller milestones and monitor them. For example, after the first 10% or 25% of
the budget, review how much actual value was delivered to business stakeholders,
and adjust the plan. If the value model is not suitable for this approach, for
example when any positive outcome requires a huge investment and there is a lot
of uncertainty, then the learning budget approach is a better option.</p>


</div>
</body>
</html>
