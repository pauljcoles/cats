<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title dir="ltr">Never say ‘no’ – say ‘not now’</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
<meta charset="utf-8"/>
</head>
<body dir="ltr">
<div>
<h2 id="idea-now-not-now">Never say ‘no’ – say ‘not now’</h2>


<figure class="image center">
  <img src="images/mobi----not_now.jpg" alt="" />
  <figcaption></figcaption>
</figure>


<p>User stories are conversation tokens. Creating a user story is a promise that at
some point, the business stakeholders and the delivery team will get together to
discuss delivering something in that particular area. The best stories are rough
product ideas and survivable experiments, not software features promised
upfront. This flexibility and vagueness of stories often results in many more
story ideas than a team can deliver in the short term. Organisations with strong
product management know when to say ‘no’, but when there is no strong product
vision teams often get in trouble by accepting everything.</p>

<p>A team we recently worked with had eight key business stakeholders in different
countries, who were constantly dumping blue-sky ideas into their delivery plan.
There was rarely any coordination or business justification for new stories. The
product owner was inexperienced and just accepted all the stories proposed by
the stakeholders, creating a plan that resembled a stream of consciousness. The
team was overloaded with low-level stories and struggled to strike a balance to
keep all the stakeholders happy. Unfortunately, because of conflicting
priorities, they rarely created any big business benefits. Despite heroic
efforts by the team to deliver stories, the business stakeholders perceived that
things were moving too slowly. As a result, the stakeholders were constantly
changing team priorities, causing a lot of context switching and delaying things
even further.</p>

<p>While flexible planning can offer significant business benefits, accepting
anything into delivery just because someone thinks it’s a good idea can lead to
a lot of wasted effort, unnecessary software complexity and high future
maintenance costs. It can also create a lot of noise in the plan and delay
strategically important deliverables.</p>

<p>If you are working in a situation where it’s impossible to refuse requests from
senior management, first try to get key stakeholders to prioritise business
impacts instead of stories. When someone proposes a change, ask them to review
whether the proposal fits the current business objective. If not, offer to stop
working on the current objective and prioritise some other impact, or to
postpone the proposed change for later. Most of the time, the person asking to
change the plan will reconsider. When the new idea is so critical as to
invalidate the current business objective, then be agile and replan. When it
isn’t, the problem will go away by itself. Effectively, never say ‘no’ –
instead say ‘not now’.</p>

<h3 id="leanpub-auto-key-benefits-45">Key benefits</h3>

<p>The key advantage of this approach is reducing interruptions while avoiding
political conflict. Saying ‘no’ might be politically inappropriate, but asking
people to accept ‘not now’ is perfectly fine. Delivery team members will be able
to focus on achieving big business impacts and not waste time on ideas anyone
from the business can think of.</p>

<p>Introducing a choice between ‘now’ and ‘not now’ helps stakeholders with simpler
iterative prioritisation.</p>

<h3 id="leanpub-auto-how-to-make-it-work-45">How to make it work</h3>

<p>Create a hierarchical backlog, for example using impact maps or user story maps,
to allow stakeholders to prioritise at a higher level before even considering
story priorities. This will help to set an overall objective and let people
decide more easily if proposed changes actually contribute to it.</p>

<p>A hierarchical backlog will also enable stakeholders to set the acceptance
criteria on a higher level, for example on achieving an impact on a customer
segment, so it will be easier to decide when to stop working on a group of
stories and select a different objective.</p>

<p>The typical pitfall with this approach is that every idea is declared to be
critical enough to change the current objective, and we’re back to the stream of
consciousness. A good way to avoid this pitfall involves two steps:</p>

<ul>
  <li>Provide a low-friction channel for stakeholders to change direction at regular
intervals</li>
  <li>Provide a high-friction channel for someone to push through a critical change
between those intervals</li>
</ul>

<p>For example, set up a product council that meets periodically to review progress
on the current objective and to decide whether it should be changed, not on a
story level, but on the level of impacts or business objectives. Get an upfront
agreement on how the objective can be changed between the meetings, but don’t
make it too easy.</p>

<p>For teams following Scrum, changing the objective between reviews equates to
abandoning the current sprint and restarting. For teams following Kanban, this
equates to an expedited class of service. Some teams allocate a fixed number of
such changes per year. Other teams require the chief information officer or the
managing director to approve each such change. An approach that works well in
many situations is to require that a change to the top priority impact between
the meetings has to be coordinated and approved by the entire product council.</p>

<p>The two ways of changing the current objective provide everyone visibility over
the plan, and an easy way to negotiate changes that are not urgent. As a result,
there is typically a lot less pressure from different stakeholders on a delivery
team. The ability to switch direction quickly when things really have to change
ensures that the business does not suffer in case of an emergency, but the
overview of objectives also ensures that the delivery team is not interrupted
unnecessarily.</p>


</div>
</body>
</html>
