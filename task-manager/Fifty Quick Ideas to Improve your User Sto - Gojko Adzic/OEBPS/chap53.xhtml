<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title dir="ltr">Get end-users to opt in to large user interface changes</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
<meta charset="utf-8"/>
</head>
<body dir="ltr">
<div>
<h2 id="idea-opt-in">Get end-users to opt in to large user interface changes</h2>


<figure class="image center">
  <img src="images/mobi----opt_ux.jpg" alt="" />
  <figcaption></figcaption>
</figure>


<p>Major user interface changes, such as visual rebranding or significant user
interaction redesigns, are a taboo for user stories. It’s difficult to get
people to discuss small, iterative changes to design. Inconsistent visuals are
the closest thing to crime in the design community, so major branding changes
have to appear on all web pages at the same time in a big bang. However, there
is a perfectly acceptable way of managing large user interface changes
iteratively which avoids all those horrible problems, and even brings a lot of
value to designers. And it revolves around simply asking end-users for
permission.</p>

<p>In
<a href="http://www.amazon.com/gp/product/B001AQ95UY/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B001AQ95UY&amp;linkCode=as2&amp;tag=swingwiki-20"><em>Inspired</em></a>,
Marty Cagan writes about using <em>gentle deployment</em> to introduce significant
product changes and avoid unpleasant surprises for users. Cagan advises
deploying a parallel version of the product and inviting users to try it out at
their leisure. Users should be ideally be able to make the new version their
default if they like it, but still go back to the old version in case of any
issues. After a while, once a large portion of the community has converted, the
new version can become the default for everyone and users should be able to opt
out and temporarily switch to the old one. Then, with sufficient notice, the old
version can be discontinued.</p>

<p>Cagan mostly writes from the context of running a new finished product in
parallel with an old one, but such gentle deployment approaches are perfectly
applicable for iterative user interface changes as well. In fact, they are
commonly used by large internet service providers all the time. At the time when
we wrote this, PayPal had a brand new business dashboard that made
multi-currency accounts difficult to use. But it allowed users to click on a
link to the old interface and manage multiple currencies easily.</p>

<p>Instead of one major upgrade to all your assets, split work into smaller chunks
and invite users to opt in to the new interface. Run the old and new versions in
parallel, incrementally building up the coverage of the new version. When
end-users choose to use the new version, they will be prepared for some
temporary inconsistencies and won’t mind if one page looks different to the
others. New users won’t necessarily know about such changes until the whole
thing is finished, so there will be no negative impact on the sales funnels or
churn. Once the entire redesign is complete, you can make the new version the
default and slowly phase out the old version.</p>

<p>As long as the timings are communicated upfront and there is a compelling reason
for users to switch interfaces, users won’t mind at all. In fact, every time
we’ve done something like this, user feedback on early component redesigns was
invaluable and helped us plan the rest of the transition better.</p>

<h3 id="leanpub-auto-key-benefits-47">Key benefits</h3>

<p>Asking people to opt in reduces the element of surprise. People who explicitly
choose to use the new version will be prepared for small inconsistencies – in
fact they will look for differences.</p>

<p>If you run the two interfaces side by side, you can divide the large interaction
and visual redesign work into chunks and push the new interface into the hands
of real users in stages, avoiding the significant risk of a big-bang approach.
For example, you can exclude new users from the new interface completely, and
only invite experienced users at first.</p>

<p>Finally, by pushing changes to a subgroup of users early, designers can collect
feedback on actual use and adjust their designs or the interaction iteratively.
For example, when users click the link to switch back to the old interface on
PayPal’s business dashboard, a questionnaire pops up asking what caused the
change.</p>

<h3 id="leanpub-auto-how-to-make-it-work-47">How to make it work</h3>

<p>Provide a compelling reason for people to switch initially. Prioritise the
redesign so that the first redesigned component gives some subgroup of users a
reason to opt in. Further increments don’t need to provide more reasons, but
there needs to be at least one good bait. This could be a neat additional
feature people have asked for, some new capability that is not available in the
old interface, or a solution to a common problem. For a nice example, see the
section on splitting stories by examples of usefulness. A compelling reason to
change will get people migrating and allow you to collect usage metrics from
real use, so that you can improve the design.</p>

<p>Make sure the switch between user interfaces is easy and reversible, so people
can try the new one out easily. This will make it appear more as an experiment.
As long as users feel that they are in control, you won’t get any angry emails.</p>

<p>It’s often not easy to support multiple versions of the user interface running
in parallel, so the team will have to consider the additional infrastructure
work involved in supporting such a staged deployment.</p>


</div>
</body>
</html>
